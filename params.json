{"name":"Bioinfo","tagline":"For bioinformaticians.","body":"Bioinfo\r\n=======\r\n\r\nFor bioinformaticians.\r\n\r\n\r\n## Coding Style\r\n\r\nPractically follow [ruby-style-guide](http://aidistan.github.io/ruby-style-guide/)\r\n, a community-driven ruby coding style guide.\r\n\r\nFollowing is the list of some __possible__ differences.\r\n\r\n### Comments\r\n\r\n* Write self-documenting code for developers.\r\n\r\n* Write YARD document within the code to generate API docs and example usages.\r\n\r\n\t* Use (part of) these sections to describe a class or module\r\n\r\n\t\t* Overview (default) : briefly describe the purpose and the usage\r\n\r\n\t\t* Mechanism\r\n\r\n\t\t* Example Usage\r\n\r\n\t\t* Supplementary : such as the brief introduction of the database (this subtitle could be changed)\r\n\r\n\t\t* Reference\r\n\r\n* Use these and only these comment annotations,\r\n\r\n\t* TODO: To note missing features or functionality that should be added at \r\n\ta later date.\r\n\r\n\t* FIXME: To note broken code that needs to be fixed.\r\n\r\n\t* OPTIMIZE: To note slow or inefficient code that may cause performance \r\n\t  problems.\r\n\r\n\t* HACK: To note code smells where questionable coding practices were used \r\n\t  and should be refactored away.\r\n\r\n\t* REVIEW: To note anything that should be looked at to confirm it is\r\n\t  working as intended. For example: REVIEW: Are we sure this is how the \r\n\t  client does X currently?\r\n\r\n### Classes & Modules\r\n\r\n* Define VERSION for each script or database class. And write the changes in \r\n  _HISTORY.md_\r\n\r\n* Use this structure in module/class definitions\r\n\r\n\t\tclass MyClass\r\n\t\t  # special handling, such as autoload, go first if has any\r\n\t\t  self.autoload(:Utility, \"myclass/utility\")\r\n\r\n\t\t  # extends and includes are the first most time\r\n\t\t  extend SomeModule\r\n\t\t  include AnotherModule\r\n\r\n\t\t  # constants are next\r\n\t\t  SOME_CONSTANT = 20\r\n\r\n\t\t  # afterwards we have attribute macros\r\n\t\t  attr_reader :name\r\n\r\n\t\t  # followed by other macros (if any)\r\n\t\t  validates :name\r\n\r\n\t\t  # public class methods are next in line\r\n\t\t  def self.some_method\r\n\t\t  end\r\n\r\n\t\t  # followed by public instance methods\r\n\t\t  def some_method\r\n\t\t  end\r\n\r\n\t\t  # protected and private methods are grouped near the end\r\n\t\t  protected\r\n\r\n\t\t  def some_protected_method\r\n\t\t  end\r\n\r\n\t\t  private\r\n\r\n\t\t  def some_private_method\r\n\t\t  end\r\n\t\tend\r\n\r\n\r\n## Test Style\r\n\r\nHaving no explicit map of our gem, we just add new Script or Module when we \r\nneed it, which make the popular test suite _RSepc_ doesn't suit our need \r\nquite well.\r\n\r\nIn such case, we choose to write our tests with the std-lib __test/unit__ and \r\n__shoulda-context__ gem.\r\n\r\n\r\n## License\r\n\r\nCopyright 2013 Aidi Stan under the MIT license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}